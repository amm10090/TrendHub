#!/usr/bin/env tsx
// Âü∫‰∫éÊâãÂä®ÊµãËØïÊàêÂäüÁªèÈ™åÁöÑÊ®°ÊãüÁÇπÂáªÂØºËà™ÁâàÊú¨
import { chromium, type Page } from "playwright";
import * as fs from "fs";
// import { fileURLToPath } from 'url'; // unused
import { SELECTORS } from "../sites/mytheresa/selectors.js";

// Type definition for Battery API
interface BatteryManager {
  level: number;
  charging: boolean;
  chargingTime: number;
  dischargingTime: number;
}

async function testSimulatedClicks() {
  console.log("üñ±Ô∏è  Simulated Click Navigation Test");
  console.log("===================================");
  console.log("üí° Âü∫‰∫éÊâãÂä®ÊµãËØïÁöÑÊàêÂäüÁªèÈ™åÔºåÊ®°ÊãüÁúüÂÆûÁÇπÂáªË°å‰∏∫");
  console.log("üñ•Ô∏è  ËøêË°åÂú®ÂèØËßÅÊµèËßàÂô®Ê®°Âºè - ÈÅøÂÖçÊó†Â§¥Ê£ÄÊµã");
  console.log("üîí ÈõÜÊàêÈ´òÁ∫ßÂèçÊ£ÄÊµãÊäÄÊúØ - Canvas/WebGL/Â≠ó‰Ωì/Êó∂Èó¥Ê∑∑Ê∑Ü");
  console.log("‚ö° È´òÊïàÊ®°Âºè - Â∑≤ÁßªÈô§Êà™ÂõæÂäüËÉΩ‰ª•ÊèêÂçáÊÄßËÉΩ");

  try {
    console.log("\nüöÄ ÂêØÂä®Ê®°ÊãüÁÇπÂáªÊµãËØï...");

    const browser = await chromium.launch({
      headless: false, // ÂÖ≥Èó≠Êó†Â§¥Ê®°Âºè - ÊòæÁ§∫ÊµèËßàÂô®ÁïåÈù¢
      args: ["--no-sandbox", "--disable-blink-features=AutomationControlled"],
    });

    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 },
      userAgent:
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    });

    const page = await context.newPage();

    // È´òÁ∫ßÂèçÊ£ÄÊµãËÑöÊú¨ - Âü∫‰∫éÊúÄÊñ∞ÂèçÁà¨Ëô´ÊäÄÊúØ
    await page.addInitScript(() => {
      console.log("üõ°Ô∏è Âä†ËΩΩÈ´òÁ∫ßÂèçÊ£ÄÊµãËÑöÊú¨...");

      // ========== Âü∫Á°ÄWebDriverÈöêËóè ==========
      Object.defineProperty(navigator, "webdriver", {
        get: () => undefined,
        configurable: true,
      });

      // Âà†Èô§ÊâÄÊúâËá™Âä®ÂåñÁõ∏ÂÖ≥ÂèòÈáè
      const automationVars = [
        "cdc_adoQpoasnfa76pfcZLmcfl_Array",
        "cdc_adoQpoasnfa76pfcZLmcfl_Promise",
        "cdc_adoQpoasnfa76pfcZLmcfl_Symbol",
        "$cdc_asdjflasutopfhvcZLmcfl_",
        "__webdriver_script_fn",
        "__webdriver_script_func",
        "__webdriver_script_function",
        "__fxdriver_id",
        "__fxdriver_unwrapped",
        "__driver_evaluate",
        "__webdriver_evaluate",
        "__selenium_evaluate",
        "__fxdriver_evaluate",
        "__driver_unwrapped",
        "__webdriver_unwrapped",
        "__selenium_unwrapped",
        "_Selenium_IDE_Recorder",
        "_selenium",
        "calledSelenium",
        "$chrome_asyncScriptInfo",
        "__$webdriverAsyncExecutor",
        "webdriver",
        "driver-evaluate",
        "webdriver-evaluate",
        "selenium-evaluate",
        "webdriverCommand",
        "webdriver-evaluate-response",
      ];

      automationVars.forEach((varName) => {
        try {
          delete (window as unknown as any)[varName];
          delete (document as unknown as any)[varName];
        } catch {
          // Ignore deletion errors
        }
      });

      // ========== CanvasÊåáÁ∫πÊ∑∑Ê∑ÜÔºàÂÖ≥ÈîÆÊäÄÊúØÔºâ==========
      const canvasNoise = () => {
        const shift = {
          r: Math.floor(Math.random() * 10) - 5,
          g: Math.floor(Math.random() * 10) - 5,
          b: Math.floor(Math.random() * 10) - 5,
          a: Math.floor(Math.random() * 10) - 5,
        };
        return shift;
      };

      const injectCanvasNoise = function () {
        const overwriteCanvasMethod = function (name: string) {
          const originalMethod =
            HTMLCanvasElement.prototype[name as keyof HTMLCanvasElement];
          Object.defineProperty(HTMLCanvasElement.prototype, name, {
            value: function (this: HTMLCanvasElement, ...args: unknown[]) {
              const context = this.getContext("2d");
              if (context) {
                // Âú®Canvas‰∏äÊ∑ªÂä†ÂæÆÂ∞èÁöÑÂô™Â£∞
                const imageData = context.getImageData(
                  0,
                  0,
                  this.width,
                  this.height,
                );
                const data = imageData.data;
                const noise = canvasNoise();

                for (let i = 0; i < data.length; i += 4) {
                  if (Math.random() < 0.001) {
                    // 1/1000 ÁöÑÂÉèÁ¥†ÁÇπÊ∑ªÂä†Âô™Â£∞
                    data[i] = Math.max(0, Math.min(255, data[i] + noise.r)); // R
                    data[i + 1] = Math.max(
                      0,
                      Math.min(255, data[i + 1] + noise.g),
                    ); // G
                    data[i + 2] = Math.max(
                      0,
                      Math.min(255, data[i + 2] + noise.b),
                    ); // B
                    data[i + 3] = Math.max(
                      0,
                      Math.min(255, data[i + 3] + noise.a),
                    ); // A
                  }
                }
                context.putImageData(imageData, 0, 0);
              }
              return (originalMethod as (...args: unknown[]) => unknown).apply(
                this,
                args,
              );
            },
          });
        };

        overwriteCanvasMethod("toBlob");
        overwriteCanvasMethod("toDataURL");
      };

      injectCanvasNoise();

      // ========== WebGLÊåáÁ∫πÊ∑∑Ê∑Ü ==========
      const getParameter = WebGLRenderingContext.prototype.getParameter;
      WebGLRenderingContext.prototype.getParameter = function (parameter) {
        // Ê∑∑Ê∑Ü‰∏Ä‰∫õÂÖ≥ÈîÆÁöÑWebGLÂèÇÊï∞
        if (parameter === 37445) {
          // UNMASKED_VENDOR_WEBGL
          return "Intel Inc.";
        }
        if (parameter === 37446) {
          // UNMASKED_RENDERER_WEBGL
          return "Intel Iris Pro OpenGL Engine";
        }
        return getParameter.call(this, parameter);
      };

      // ========== ÂÆåÂñÑNavigatorÂ±ûÊÄß‰º™ÈÄ† ==========

      // ÂàõÂª∫ÁúüÂÆûÁöÑ Chrome ÂØπË±°
      if (!(window as any).chrome) {
        Object.defineProperty(window, "chrome", {
          writable: true,
          enumerable: true,
          configurable: false,
          value: {
            runtime: {
              onConnect: null,
              onMessage: null,
              onStartup: null,
              onInstalled: null,
              onSuspend: null,
              onSuspendCanceled: null,
              connect: function () {},
              sendMessage: function () {},
              getURL: function () {},
              getManifest: function () {
                return {};
              },
              reload: function () {},
              requestUpdateCheck: function () {},
              restart: function () {},
              restartAfterDelay: function () {},
              setUninstallURL: function () {},
              openOptionsPage: function () {},
            },
            app: {
              isInstalled: false,
              InstallState: {
                DISABLED: "disabled",
                INSTALLED: "installed",
                NOT_INSTALLED: "not_installed",
              },
              RunningState: {
                CANNOT_RUN: "cannot_run",
                READY_TO_RUN: "ready_to_run",
                RUNNING: "running",
              },
            },
            csi: function () {},
            loadTimes: function () {
              return {
                requestTime: Date.now() / 1000 - Math.random(),
                startLoadTime: Date.now() / 1000 - Math.random(),
                commitLoadTime: Date.now() / 1000 - Math.random(),
                finishDocumentLoadTime: Date.now() / 1000 - Math.random(),
                finishLoadTime: Date.now() / 1000 - Math.random(),
                firstPaintTime: Date.now() / 1000 - Math.random(),
                firstPaintAfterLoadTime: 0,
                navigationType: "Other",
              };
            },
          },
        });
      }

      // Ê®°ÊãüÁúüÂÆûÁöÑ permissions
      const originalQuery = window.navigator.permissions.query;
      window.navigator.permissions.query = (
        parameters: PermissionDescriptor,
      ) =>
        parameters.name === "notifications"
          ? Promise.resolve({
              state: Notification.permission,
            } as PermissionStatus)
          : originalQuery(parameters);

      // Ê®°ÊãüÁúüÂÆûÁöÑ plugins
      Object.defineProperty(navigator, "plugins", {
        get: () => [
          {
            0: {
              type: "application/x-google-chrome-pdf",
              suffixes: "pdf",
              description: "Portable Document Format",
              enabledPlugin: null,
            },
            description: "Portable Document Format",
            filename: "internal-pdf-viewer",
            length: 1,
            name: "Chrome PDF Plugin",
          },
          {
            0: {
              type: "application/pdf",
              suffixes: "pdf",
              description: "",
              enabledPlugin: null,
            },
            description: "",
            filename: "mhjfbmdgcfjbbpaeojofohoefgiehjai",
            length: 1,
            name: "Chrome PDF Viewer",
          },
        ],
      });

      // ÈöêËóèËá™Âä®ÂåñÁõ∏ÂÖ≥Â±ûÊÄß
      Object.defineProperty(navigator, "languages", {
        get: () => ["en-US", "en"],
      });

      Object.defineProperty(navigator, "platform", {
        get: () => "MacIntel",
      });

      // Ê®°ÊãüÁúüÂÆûÁöÑÂ±èÂπï‰ø°ÊÅØ
      Object.defineProperty(screen, "width", { get: () => 1920 });
      Object.defineProperty(screen, "height", { get: () => 1080 });
      Object.defineProperty(screen, "availWidth", { get: () => 1920 });
      Object.defineProperty(screen, "availHeight", { get: () => 1080 });
      Object.defineProperty(screen, "colorDepth", { get: () => 24 });
      Object.defineProperty(screen, "pixelDepth", { get: () => 24 });

      // ÈöêËóèÊó†Â§¥ÊµèËßàÂô®ÁöÑÁâπÂæÅ
      Object.defineProperty(navigator, "hardwareConcurrency", {
        get: () => 8,
      });

      Object.defineProperty(navigator, "deviceMemory", {
        get: () => 8,
      });

      // Ê®°ÊãüÁúüÂÆûÁöÑËøûÊé•‰ø°ÊÅØ
      Object.defineProperty(navigator, "connection", {
        get: () => ({
          effectiveType: "4g",
          rtt: 100,
          downlink: 2.0,
        }),
      });

      // ========== Êó∂Èó¥Êà≥ÂíåË°å‰∏∫Ê®°Êãü ==========

      // Ë¶ÜÁõñDateÂØπË±°‰ª•ÈÅøÂÖçÊó∂Èó¥Ê£ÄÊµã
      // const originalDate = Date; // Currently unused, but kept for future Date override implementation

      // ÈáçÂÜôperformance.now()‰ª•Ê®°ÊãüÁúüÂÆûÁöÑÊÄßËÉΩÊó∂Èó¥
      const originalPerformanceNow = performance.now;
      const performanceOffset = Math.random() * 1000;
      performance.now = function () {
        return originalPerformanceNow.call(this) + performanceOffset;
      };

      // Ê®°ÊãüÈº†Ê†áËΩ®ËøπÁºìÂ≠ò
      (window as any).__mouseTrajectoryCache = [];
      const originalAddEventListener = EventTarget.prototype.addEventListener;
      EventTarget.prototype.addEventListener = function (
        type,
        listener,
        options,
      ) {
        if (type === "mousemove" && Math.random() < 0.1) {
          // 10%ÁöÑÊ¶ÇÁéáËÆ∞ÂΩïÈº†Ê†áÁßªÂä®
          (window as any).__mouseTrajectoryCache.push({
            timestamp: Date.now(),
            x: Math.floor(Math.random() * 1920),
            y: Math.floor(Math.random() * 1080),
          });

          // ÈôêÂà∂ÁºìÂ≠òÂ§ßÂ∞è
          if ((window as any).__mouseTrajectoryCache.length > 50) {
            (window as any).__mouseTrajectoryCache.shift();
          }
        }
        return originalAddEventListener.call(this, type, listener, options);
      };

      // ========== Â≠ó‰ΩìÊ£ÄÊµãÁªïËøá ==========

      // ‰º™ÈÄ†Â≠ó‰ΩìÂàóË°®‰ª•Ê®°ÊãüÁúüÂÆûÁ≥ªÁªü
      const fakeFonts = [
        "Arial",
        "Arial Black",
        "Arial Narrow",
        "Arial Rounded MT Bold",
        "Calibri",
        "Cambria",
        "Century Gothic",
        "Comic Sans MS",
        "Courier New",
        "Georgia",
        "Helvetica",
        "Impact",
        "Lucida Console",
        "Lucida Sans Unicode",
        "Microsoft Sans Serif",
        "Palatino Linotype",
        "Tahoma",
        "Times New Roman",
        "Trebuchet MS",
        "Verdana",
        "Webdings",
        "Wingdings",
        "MS Sans Serif",
      ];

      // ÈáçÂÜôÂ≠ó‰ΩìÊ£ÄÊµãÊñπÊ≥ï
      const originalOffsetWidth = Object.getOwnPropertyDescriptor(
        HTMLElement.prototype,
        "offsetWidth",
      );
      const originalOffsetHeight = Object.getOwnPropertyDescriptor(
        HTMLElement.prototype,
        "offsetHeight",
      );

      function addFontNoise(value: number) {
        return Math.floor(value + (Math.random() - 0.5) * 2); // Ê∑ªÂä†¬±1ÂÉèÁ¥†ÁöÑÂô™Â£∞
      }

      if (originalOffsetWidth) {
        Object.defineProperty(HTMLElement.prototype, "offsetWidth", {
          get: function () {
            const element = this as HTMLElement;
            if (
              element.style &&
              element.style.fontFamily &&
              fakeFonts.includes(element.style.fontFamily)
            ) {
              const originalValue = originalOffsetWidth.get?.call(this) || 0;
              return addFontNoise(originalValue as number);
            }
            return originalOffsetWidth.get?.call(this);
          },
        });
      }

      if (originalOffsetHeight) {
        Object.defineProperty(HTMLElement.prototype, "offsetHeight", {
          get: function () {
            const element = this as HTMLElement;
            if (
              element.style &&
              element.style.fontFamily &&
              fakeFonts.includes(element.style.fontFamily)
            ) {
              const originalValue = originalOffsetHeight.get?.call(this) || 0;
              return addFontNoise(originalValue as number);
            }
            return originalOffsetHeight.get?.call(this);
          },
        });
      }

      // ========== Â¢ûÂº∫WebGLÊåáÁ∫πÊ∑∑Ê∑Ü ==========

      // ÈáçÂÜôÊõ¥Â§öWebGLÊñπÊ≥ï‰ª•Â¢ûÂº∫Ê∑∑Ê∑Ü
      const originalGetParameter = WebGLRenderingContext.prototype.getParameter;
      WebGLRenderingContext.prototype.getParameter = function (parameter) {
        // ‰º™ÈÄ†Êõ¥Â§öWebGLÂèÇÊï∞
        const fakeParams: { [key: number]: string | number | number[] } = {
          7936: "Intel Inc.", // VENDOR
          7937: "Intel Iris Pro OpenGL Engine", // RENDERER
          7938: "4.1 INTEL-18.2.12", // VERSION
          35724: "WebGL GLSL ES 1.0 (OpenGL ES GLSL ES 1.0 Chromium)", // SHADING_LANGUAGE_VERSION
          37445: "Intel Inc.", // UNMASKED_VENDOR_WEBGL
          37446: "Intel Iris Pro OpenGL Engine", // UNMASKED_RENDERER_WEBGL
          34047: 16, // MAX_VERTEX_ATTRIBS
          34076: 16, // MAX_TEXTURE_IMAGE_UNITS
          34024: 8, // MAX_VERTEX_TEXTURE_IMAGE_UNITS
          3379: 16384, // MAX_TEXTURE_SIZE
          34930: 16384, // MAX_CUBE_MAP_TEXTURE_SIZE
          35071: 8, // MAX_COMBINED_TEXTURE_IMAGE_UNITS
          3386: [1, 1], // ALIASED_POINT_SIZE_RANGE
          33901: [1, 1], // ALIASED_LINE_WIDTH_RANGE
          33902: 1, // MAX_VIEWPORT_DIMS
        };

        if (Object.prototype.hasOwnProperty.call(fakeParams, parameter)) {
          return fakeParams[parameter];
        }

        return originalGetParameter.call(this, parameter);
      };

      // ÈáçÂÜôgetExtensionÊñπÊ≥ï‰ª•ÊéßÂà∂Êâ©Â±ïÁöÑÂèØËßÅÊÄß
      const originalGetExtension = WebGLRenderingContext.prototype.getExtension;
      WebGLRenderingContext.prototype.getExtension = function (name) {
        // ‰º™ÈÄ†‰∏Ä‰∫õÂ∏∏ËßÅÁöÑÊâ©Â±ïÊîØÊåÅÁä∂ÊÄÅ
        const fakeExtensions = [
          "WEBKIT_EXT_texture_filter_anisotropic",
          "EXT_texture_filter_anisotropic",
          "WEBKIT_WEBGL_lose_context",
          "WEBGL_lose_context",
          "OES_standard_derivatives",
          "OES_vertex_array_object",
          "WEBGL_debug_renderer_info",
        ];

        if (fakeExtensions.includes(name)) {
          return {}; // ËøîÂõû‰º™ÈÄ†ÁöÑÊâ©Â±ïÂØπË±°
        }

        return originalGetExtension.call(this, name);
      };

      // ========== È´òÁ∫ßCanvasÊåáÁ∫πÊ∑∑Ê∑ÜÂ¢ûÂº∫ ==========

      // Â¢ûÂº∫Canvas 2DÊ∏≤Êüì‰∏ä‰∏ãÊñáÊ∑∑Ê∑Ü
      const originalGetContext = HTMLCanvasElement.prototype.getContext;
      (HTMLCanvasElement.prototype as any).getContext = function (
        contextType: string,
        contextAttributes: unknown,
      ) {
        const context = originalGetContext.call(
          this,
          contextType,
          contextAttributes,
        );

        if (contextType === "2d" && context) {
          // ÈáçÂÜôfillTextÂíåstrokeTextÊñπÊ≥ïÊ∑ªÂä†ÂæÆÂ∞èÂÅèÁßª
          const originalFillText = (context as any).fillText;
          const originalStrokeText = (context as any).strokeText;

          (context as any).fillText = function (
            text: unknown,
            x: unknown,
            y: unknown,
            maxWidth: unknown,
          ) {
            const offsetX = (x as number) + (Math.random() - 0.5) * 0.001;
            const offsetY = (y as number) + (Math.random() - 0.5) * 0.001;
            return originalFillText.call(
              this,
              text,
              offsetX,
              offsetY,
              maxWidth,
            );
          };

          (context as any).strokeText = function (
            text: unknown,
            x: unknown,
            y: unknown,
            maxWidth: unknown,
          ) {
            const offsetX = (x as number) + (Math.random() - 0.5) * 0.001;
            const offsetY = (y as number) + (Math.random() - 0.5) * 0.001;
            return originalStrokeText.call(
              this,
              text,
              offsetX,
              offsetY,
              maxWidth,
            );
          };
        }

        return context;
      };

      // ========== Â™í‰ΩìËÆæÂ§áÊ∑∑Ê∑Ü ==========

      // ‰º™ÈÄ†Â™í‰ΩìËÆæÂ§á‰ø°ÊÅØ
      if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
        const originalEnumerateDevices =
          navigator.mediaDevices.enumerateDevices;
        (navigator.mediaDevices as any).enumerateDevices = function () {
          return originalEnumerateDevices
            .call(this)
            .then((devices: MediaDeviceInfo[]) => {
              // Ê∑ªÂä†‰∏Ä‰∫õÂ∏∏ËßÅÁöÑËôöÂÅáËÆæÂ§á
              const fakeDevices = [
                {
                  deviceId: "default",
                  groupId: "5f4e2c3b8a1d7f9e6c4a8b2d1e3f5a7c",
                  kind: "audioinput" as MediaDeviceKind,
                  label: "Built-in Microphone",
                  toJSON: function () {
                    return this;
                  },
                },
                {
                  deviceId: "communications",
                  groupId: "5f4e2c3b8a1d7f9e6c4a8b2d1e3f5a7c",
                  kind: "audiooutput" as MediaDeviceKind,
                  label: "Built-in Output",
                  toJSON: function () {
                    return this;
                  },
                },
              ];

              return [...devices, ...fakeDevices];
            });
        };
      }

      // ========== ÁîµÊ±†APIÊ∑∑Ê∑Ü ==========

      // Â¶ÇÊûúÂ≠òÂú®ÁîµÊ±†APIÔºåËøõË°åÊ∑∑Ê∑Ü
      if ((navigator as any).getBattery) {
        const originalGetBattery = (navigator as any).getBattery;
        (navigator as any).getBattery = function () {
          return (originalGetBattery as () => Promise<BatteryManager>)
            .call(this)
            .then((battery: BatteryManager) => {
              // ÂàõÂª∫‰º™ÈÄ†ÁöÑÁîµÊ±†Áä∂ÊÄÅ
              const fakeBattery = {
                ...battery,
                level: 0.87 + Math.random() * 0.1, // 87-97%ÁöÑÁîµÈáè
                charging: Math.random() > 0.5,
                chargingTime:
                  Math.random() > 0.5
                    ? Infinity
                    : Math.floor(Math.random() * 7200),
                dischargingTime: Math.floor(Math.random() * 28800) + 3600, // 1-9Â∞èÊó∂
              };

              return fakeBattery;
            });
        };
      }

      // ========== Â≠òÂÇ®APIÊ∑∑Ê∑Ü ==========

      // Ê∑ªÂä†localStorageËÆøÈóÆÂª∂ËøüÊ®°ÊãüÁúüÂÆû‰ΩøÁî®
      const originalSetItem = Storage.prototype.setItem;
      const originalGetItem = Storage.prototype.getItem;

      Storage.prototype.setItem = function (key, value) {
        // Ê∑ªÂä†ÂæÆÂ∞èÁöÑÂª∂Ëøü
        setTimeout(() => {
          originalSetItem.call(this, key, value);
        }, Math.random() * 2);
      };

      Storage.prototype.getItem = function (key) {
        const result = originalGetItem.call(this, key);
        // Ê®°ÊãüËÆøÈóÆÂª∂Ëøü
        if (Math.random() < 0.1) {
          // 10%ÁöÑÊ¶ÇÁéáÊ∑ªÂä†Âª∂Ëøü
          setTimeout(() => {}, Math.random());
        }
        return result;
      };

      console.log(
        "üõ°Ô∏è È´òÁ∫ßÂèçÊ£ÄÊµãËÑöÊú¨Â∑≤ÂÆåÂÖ®Âä†ËΩΩ - ÂåÖÂê´Canvas„ÄÅWebGL„ÄÅÂ≠ó‰Ωì„ÄÅÊó∂Èó¥Êà≥„ÄÅÂ™í‰ΩìËÆæÂ§á„ÄÅÁîµÊ±†ÂíåÂ≠òÂÇ®Ê∑∑Ê∑Ü",
      );
      console.log("üñ•Ô∏è ËøêË°åÂú®ÂèØËßÅÊµèËßàÂô®Ê®°Âºè - ÊúÄÂ§ßÁ®ãÂ∫¶ÈÅøÂÖçÂèçÁà¨Ê£ÄÊµã");
    });

    // 1. Áõ¥Êé•ÂØºËà™Âà∞ women È°µÈù¢‰Ωú‰∏∫Ëµ∑ÂßãÁÇπ
    console.log("\nüè† ÂØºËà™Âà∞ women È°µÈù¢...");
    try {
      await page.goto("https://www.mytheresa.com/us/en/women", {
        waitUntil: "domcontentloaded",
        timeout: 90000,
      });

      // Á≠âÂæÖÈ°µÈù¢Á®≥ÂÆö
      await page.waitForTimeout(5000);
    } catch (gotoError: unknown) {
      const error = gotoError as Error;
      console.log(`‚ö†Ô∏è È¶ñÊ¨°ÂØºËà™Â§±Ë¥•: ${error.message}`);
      console.log("üîÑ Â∞ùËØïÈáçÊñ∞ÂØºËà™...");

      try {
        await page.goto("https://www.mytheresa.com/us/en/women", {
          waitUntil: "load",
          timeout: 120000,
        });
        await page.waitForTimeout(3000);
      } catch (retryError: unknown) {
        const retryErr = retryError as Error;
        console.log(`‚ùå ÈáçËØïÂØºËà™‰πüÂ§±Ë¥•: ${retryErr.message}`);
        throw retryError;
      }
    }

    console.log(`üìã WomenÈ°µÈù¢Ê†áÈ¢ò: "${await page.title()}"`);
    console.log("‚úÖ WomenÈ°µÈù¢Âä†ËΩΩÊàêÂäü");

    // 2. Ê®°ÊãüÁúüÂÆûÁî®Êà∑Ë°å‰∏∫ - ÈòÖËØªÈ°µÈù¢
    console.log("\nüë§ Ê®°ÊãüÁúüÂÆûÁî®Êà∑ÊµèËßàË°å‰∏∫...");
    await simulateRealUserBehavior(page);

    // 3. ÁÇπÂáªÂØºËà™‰∏≠ÁöÑ New Arrivals ÈìæÊé•
    console.log("\nüñ±Ô∏è  ÂØªÊâæÂπ∂ÁÇπÂáªÂØºËà™‰∏≠ÁöÑ 'New Arrivals' ÈìæÊé•...");

    try {
      // Á≠âÂæÖÂØºËà™Ê†èÂä†ËΩΩÂÆåÊàê
      await page.waitForSelector(".headerdesktop__section__wrapper__nav", {
        timeout: 10000,
      });
      console.log("‚úÖ ÂØºËà™Ê†èÂ∑≤Âä†ËΩΩ");

      // Ê†πÊçÆ‰Ω†Êèê‰æõÁöÑÁ≤æÁ°ÆHTMLÁªìÊûÑÂÆö‰ΩçNew Arrivals
      const newArrivalsSelectors = [
        // ÊúÄÁ≤æÁ°ÆÁöÑÈÄâÊã©Âô® - Âü∫‰∫é‰Ω†Êèê‰æõÁöÑHTMLÁªìÊûÑ
        '.headerdesktop__section__wrapper__nav .nav .nav__item[data-nav-id="0"] .nav__item__text__link__label:has-text("New Arrivals")',
        '.nav__item[data-nav-id="0"] .nav__item__text__link[data-tracking-label="fo_ww=new-arrivals_main"]',
        'a[data-tracking-label="fo_ww=new-arrivals_main"][href="/us/en/women/new-arrivals/current-week"]',
        // Â§áÁî®ÈÄâÊã©Âô®
        '.nav__item__text__link__label:has-text("New Arrivals")',
        'a[href="/us/en/women/new-arrivals/current-week"]',
        '.nav__item[data-nav-id="0"] a',
      ];

      let newArrivalsLink = null;
      let usedSelector = "";

      for (const selector of newArrivalsSelectors) {
        try {
          console.log(`üîç Â∞ùËØïÈÄâÊã©Âô®: ${selector}`);
          newArrivalsLink = await page.locator(selector).first();
          if (await newArrivalsLink.isVisible({ timeout: 3000 })) {
            console.log(`üìç ÊâæÂà∞New ArrivalsÈìæÊé•: ${selector}`);
            usedSelector = selector;
            break;
          }
        } catch (err: unknown) {
          const error = err as Error;
          console.log(`‚ùå ÈÄâÊã©Âô®Â§±Ë¥•: ${selector} - ${error.message}`);
          continue;
        }
      }

      if (newArrivalsLink && (await newArrivalsLink.isVisible())) {
        console.log(
          `üéØ ÂáÜÂ§áÁÇπÂáªNew ArrivalsÈìæÊé• (‰ΩøÁî®ÈÄâÊã©Âô®: ${usedSelector})`,
        );

        // ÂÖàÊªöÂä®Âà∞ÂØºËà™Âå∫ÂüüÁ°Æ‰øùÂèØËßÅ
        await page.evaluate(() => {
          window.scrollTo({ top: 0, behavior: "smooth" });
        });
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // Ê®°ÊãüÁúüÂÆûÁöÑÈº†Ê†áÁßªÂä®ÂíåÁÇπÂáª
        const box = await newArrivalsLink.boundingBox();
        if (box) {
          console.log(
            `üìç ÈìæÊé•‰ΩçÁΩÆ: x=${box.x}, y=${box.y}, width=${box.width}, height=${box.height}`,
          );

          // ÊÖ¢ÊÖ¢ÁßªÂä®Èº†Ê†áÂà∞ÈìæÊé•‰ΩçÁΩÆ
          await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, {
            steps: 10,
          });
          await new Promise((resolve) =>
            setTimeout(resolve, 1000 + Math.random() * 1000),
          );

          // ÊÇ¨ÂÅú‰∏Ä‰∏ã
          await newArrivalsLink.hover();
          console.log("üñ±Ô∏è  Èº†Ê†áÊÇ¨ÂÅúÂú®New Arrivals‰∏ä");
          await new Promise((resolve) =>
            setTimeout(resolve, 500 + Math.random() * 500),
          );

          // ÁÇπÂáªÂπ∂Á≠âÂæÖÂØºËà™
          console.log("üñ±Ô∏è  ÊâßË°åÁÇπÂáª...");
          await Promise.all([
            page
              .waitForNavigation({
                waitUntil: "domcontentloaded",
                timeout: 15000,
              })
              .catch(() => {
                console.log("‚ö†Ô∏è ÂØºËà™Á≠âÂæÖË∂ÖÊó∂Ôºå‰ΩÜÂèØËÉΩÂ∑≤ÁªèÊàêÂäüË∑≥ËΩ¨");
              }),
            newArrivalsLink.click(),
          ]);

          console.log("‚úÖ ÊàêÂäüÁÇπÂáª New Arrivals ÂØºËà™");

          // ÁªôÈ°µÈù¢‰∏Ä‰∫õÊó∂Èó¥Á®≥ÂÆö
          await page.waitForTimeout(3000);
        } else {
          throw new Error("Êó†Ê≥ïËé∑ÂèñNew ArrivalsÈìæÊé•‰ΩçÁΩÆ");
        }
      } else {
        throw new Error("Êú™ÊâæÂà∞New ArrivalsÈìæÊé•");
      }
    } catch (error: unknown) {
      const err = error as Error;
      console.log(`‚ö†Ô∏è  ÁÇπÂáªNew ArrivalsÂØºËà™ËøáÁ®ã‰∏≠Âá∫Áé∞ÈóÆÈ¢ò: ${err.message}`);

      // Ê£ÄÊü•ÂΩìÂâçURLÔºåÂèØËÉΩÂÆûÈôÖ‰∏äÂ∑≤ÁªèË∑≥ËΩ¨ÊàêÂäü‰∫Ü
      const currentUrl = page.url();
      console.log(`üîç ÂΩìÂâçÈ°µÈù¢URL: ${currentUrl}`);

      if (currentUrl.includes("new-arrivals")) {
        console.log("‚úÖ Â∞ΩÁÆ°Âá∫Áé∞ÈîôËØØÔºå‰ΩÜÂÆûÈôÖ‰∏äÂ∑≤ÁªèÊàêÂäüË∑≥ËΩ¨Âà∞New ArrivalsÈ°µÈù¢");
      } else {
        console.log("‚ùå ÁÇπÂáªÂØºËà™Â§±Ë¥•‰∏îÊú™ÊàêÂäüË∑≥ËΩ¨");
        console.log("üí° ÊèêÁ§∫ÔºöÈÅøÂÖç‰ΩøÁî®Áõ¥Êé•ÂØºËà™‰ª•Èò≤Ëß¶ÂèëÂèçÁà¨Ê£ÄÊµã");
        // ‰∏çËøõË°åÁõ¥Êé•ÂØºËà™Ôºå‰øùÊåÅÂú®ÂΩìÂâçÈ°µÈù¢
      }
    }

    console.log(`üìç ÊúÄÁªàÈ°µÈù¢: ${page.url()}`);
    console.log(`üìã ÊúÄÁªàÈ°µÈù¢Ê†áÈ¢ò: "${await page.title()}"`);

    // Á≠âÂæÖÈ°µÈù¢Á®≥ÂÆö
    await page.waitForTimeout(2000);

    // 6. Ê£ÄÊü•ÊòØÂê¶Âà∞ËææÁõÆÊ†áÈ°µÈù¢
    const finalUrl = page.url();
    const targetReached =
      finalUrl.includes("new-arrivals") || finalUrl.includes("newin");

    if (targetReached) {
      console.log("üéâ ÊàêÂäüÂà∞ËææÁõÆÊ†áÈ°µÈù¢ÔºÅ");

      // Ê®°ÊãüÁî®Êà∑ÊµèËßà‰∫ßÂìÅÈ°µÈù¢
      console.log("\nüëÄ ÊµèËßà‰∫ßÂìÅÈ°µÈù¢...");
      await simulateProductBrowsing(page);

      // ÊèêÂèñ‰∫ßÂìÅ‰ø°ÊÅØ
      console.log("\nüì¶ ÊèêÂèñ‰∫ßÂìÅ‰ø°ÊÅØ...");
      const products = await extractProducts(page);

      if (products.length > 0) {
        console.log(`‚úÖ ÊàêÂäüÊèêÂèñ ${products.length} ‰∏™‰∫ßÂìÅÔºÅ`);

        console.log("\nüìã ‰∫ßÂìÅÊ†∑‰æã:");
        products.slice(0, 3).forEach((product, index) => {
          console.log(`${index + 1}. ${product.brand} - ${product.title}`);
          console.log(`   üí∞ ‰ª∑Ê†º: ${product.price}`);
          console.log(`   üîó ÈìæÊé•: ${product.link}`);
          console.log("");
        });

        // ÂºÄÂßãËØ¶ÊÉÖÈ°µÊäìÂèñ (ÊµãËØïÈò∂ÊÆµÔºåÂè™ÊäìÂèñÂâç3‰∏™)
        console.log("\nüöÄ ÂºÄÂßãÂïÜÂìÅËØ¶ÊÉÖÈ°µÊäìÂèñ...");
        const detailedProducts = await extractProductDetails(page, products, 3); // ÊµãËØïÈò∂ÊÆµÔºöÂè™ÊäìÂèñÂâç3‰∏™ÂïÜÂìÅÁöÑËØ¶ÊÉÖ

        // ‰øùÂ≠òÁªìÊûú
        const results = {
          listPageProducts: products,
          detailedProducts: detailedProducts,
          summary: {
            totalProducts: products.length,
            detailedCount: detailedProducts.filter((p) => p.hasDetailData)
              .length,
            timestamp: new Date().toISOString(),
          },
        };

        fs.writeFileSync(
          "simulated-clicks-results.json",
          JSON.stringify(results, null, 2),
        );
        console.log("üíæ ÂÆåÊï¥ÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞ simulated-clicks-results.json");

        // ÊòæÁ§∫ËØ¶ÊÉÖÊäìÂèñÁªìÊûú
        const successfulDetails = detailedProducts.filter(
          (p) => p.hasDetailData,
        );
        console.log("\nüîç ÂïÜÂìÅËØ¶ÊÉÖÊäìÂèñÊ†∑‰æã:");
        successfulDetails.slice(0, 2).forEach((product, index) => {
          console.log(`${index + 1}. ${product.brand} - ${product.name}`);
          console.log(`   üí∞ ÂΩìÂâç‰ª∑Ê†º: ${product.currentPrice || "N/A"}`);
          console.log(`   üí∞ Âéü‰ª∑: ${product.originalPrice || "N/A"}`);
          console.log(`   üé® È¢úËâ≤: ${product.color || "N/A"}`);
          console.log(`   üìù ÊùêË¥®: ${product.material || "N/A"}`);
          console.log(`   üîó ËØ¶ÊÉÖÈ°µ: ${product.detailPageUrl}`);
          console.log("");
        });

        console.log("\nüéØ ÂÆåÊï¥ÊäìÂèñÊµãËØïÊàêÂäüÂàÜÊûê:");
        console.log("- Ê®°ÊãüÈº†Ê†áÁßªÂä®: ‚úÖ ÁúüÂÆûËΩ®Ëøπ");
        console.log("- Ê®°ÊãüÁÇπÂáªÂØºËà™: ‚úÖ Ëá™ÁÑ∂‰∫§‰∫í");
        console.log("- Â§öÈ°µÂïÜÂìÅÊäìÂèñ: ‚úÖ Ê≠£Â∏∏Â∑•‰Ωú");
        console.log("- ÂïÜÂìÅËØ¶ÊÉÖÊäìÂèñ: ‚úÖ ÊàêÂäüËé∑Âèñ");
        console.log("- ÂèçÁà¨Ëô´ÁªïËøá: ‚úÖ ÂÆåÂÖ®ÊàêÂäü");
        console.log(
          `- ËØ¶ÊÉÖÈ°µÊàêÂäüÁéá: ${successfulDetails.length}/${detailedProducts.length} (${Math.round((successfulDetails.length / detailedProducts.length) * 100)}%)`,
        );

        console.log("üéâ ÂÆåÊï¥ÊäìÂèñÊµãËØïÊàêÂäüÂÆåÊàêÔºÅ");
      } else {
        console.log("‚ö†Ô∏è  Âà∞ËææÈ°µÈù¢‰ΩÜÊú™ÊèêÂèñÂà∞‰∫ßÂìÅÊï∞ÊçÆ");

        // ‰øùÂ≠òÈ°µÈù¢ÂÜÖÂÆπÁî®‰∫éÂàÜÊûê
        const pageContent = await page.content();
        fs.writeFileSync("simulated-clicks-page.html", pageContent);
        console.log("üíæ È°µÈù¢ÂÜÖÂÆπÂ∑≤‰øùÂ≠òÁî®‰∫éÂàÜÊûê");
      }
    } else {
      console.log("‚ùå Êú™ËÉΩÂà∞ËææÁõÆÊ†áÈ°µÈù¢");
      console.log(`üìç ÂΩìÂâç‰ΩçÁΩÆ: ${finalUrl}`);
    }

    // ‰øùÊåÅÊµèËßàÂô®ÂºÄÂêØËßÇÂØü
    console.log("\n‚è∞ ‰øùÊåÅÊµèËßàÂô®ÂºÄÂêØ30Áßí‰æõËßÇÂØü...");
    await new Promise((resolve) => setTimeout(resolve, 30000));

    await browser.close();
  } catch (error: unknown) {
    console.error("\n‚ùå Ê®°ÊãüÁÇπÂáªÊµãËØïÂ§±Ë¥•:");
    console.error(error);
  }
}

/**
 * Ê®°ÊãüÁúüÂÆûÁî®Êà∑ÊµèËßàË°å‰∏∫
 */
async function simulateRealUserBehavior(page: Page): Promise<void> {
  // ÈòÖËØªÊó∂Èó¥
  const readingTime = 3000 + Math.random() * 4000;
  await new Promise((resolve) => setTimeout(resolve, readingTime));

  // ÈöèÊú∫ÊªöÂä®
  await page.evaluate(() => {
    window.scrollBy({
      top: window.innerHeight * (0.2 + Math.random() * 0.3),
      behavior: "smooth",
    });
  });

  await new Promise((resolve) =>
    setTimeout(resolve, 1000 + Math.random() * 1000),
  );

  // ÈöèÊú∫Èº†Ê†áÁßªÂä®
  const viewport = (await page.viewportSize()) || { width: 1920, height: 1080 };
  await page.mouse.move(
    Math.random() * viewport.width,
    Math.random() * viewport.height,
    { steps: 5 },
  );
}

/**
 * Ê®°Êãü‰∫ßÂìÅÈ°µÈù¢ÊµèËßàË°å‰∏∫
 */
async function simulateProductBrowsing(page: Page): Promise<void> {
  // Êõ¥ÈïøÁöÑÊµèËßàÊó∂Èó¥
  const browsingTime = 5000 + Math.random() * 5000;
  await new Promise((resolve) => setTimeout(resolve, browsingTime));

  // Â§öÊ¨°ÊªöÂä®Êü•Áúã‰∫ßÂìÅ
  for (let i = 0; i < 3; i++) {
    await page.evaluate(() => {
      window.scrollBy({
        top: window.innerHeight * 0.4,
        behavior: "smooth",
      });
    });
    await new Promise((resolve) =>
      setTimeout(resolve, 2000 + Math.random() * 1000),
    );
  }
}

/**
 * ÊèêÂèñ‰∫ßÂìÅ‰ø°ÊÅØ - ÊîØÊåÅÂ§öÈ°µÊäìÂèñ
 */
async function extractProducts(page: Page): Promise<Record<string, unknown>[]> {
  try {
    console.log("üîç ÂºÄÂßãÂ§öÈ°µÂïÜÂìÅÊäìÂèñ...");
    console.log("üéØ ÁõÆÊ†á: ÊäìÂèñ180‰∏™ÂïÜÂìÅ");

    const TARGET_PRODUCTS = 180;
    const products: Record<string, unknown>[] = [];
    let currentPage = 1;

    while (products.length < TARGET_PRODUCTS) {
      console.log(`\nüìÑ Á¨¨${currentPage}È°µÂïÜÂìÅÊäìÂèñ...`);

      // Á≠âÂæÖÂΩìÂâçÈ°µÈù¢ÂïÜÂìÅÂä†ËΩΩ
      await page.waitForTimeout(3000);

      // Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢ÁöÑÊâÄÊúâÂïÜÂìÅ
      const currentPageProducts = await extractCurrentPageProducts(page);

      if (currentPageProducts.length === 0) {
        console.log("‚ö†Ô∏è ÂΩìÂâçÈ°µÈù¢Êú™ÊâæÂà∞ÂïÜÂìÅÔºåÂÅúÊ≠¢ÊäìÂèñ");
        break;
      }

      // Ê∑ªÂä†Êñ∞ÂïÜÂìÅÂà∞ÁªìÊûú‰∏≠ÔºàÈÅøÂÖçÈáçÂ§çÔºâ
      let newProductsCount = 0;
      for (const product of currentPageProducts) {
        if (products.length >= TARGET_PRODUCTS) break;

        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÈÄöËøáÈìæÊé•Âà§Êñ≠Ôºâ
        const exists = products.some((p) => p.link === product.link);
        if (!exists) {
          products.push(product);
          newProductsCount++;
          console.log(
            `‚úÖ ÂïÜÂìÅ ${products.length}: ${product.brand} - ${product.name || product.title}`,
          );
        }
      }

      console.log(
        `üìä Á¨¨${currentPage}È°µÊñ∞Â¢û ${newProductsCount} ‰∏™ÂïÜÂìÅÔºåÊÄªËÆ° ${products.length} ‰∏™ÂïÜÂìÅ`,
      );

      // Â¶ÇÊûúÂ∑≤ËææÂà∞ÁõÆÊ†áÊï∞ÈáèÔºåÂÅúÊ≠¢ÊäìÂèñ
      if (products.length >= TARGET_PRODUCTS) {
        console.log(`üéâ Â∑≤ËææÂà∞ÁõÆÊ†áÊï∞Èáè ${TARGET_PRODUCTS} ‰∏™ÂïÜÂìÅÔºÅ`);
        break;
      }

      // Â∞ùËØïÂä†ËΩΩÊõ¥Â§öÂïÜÂìÅ
      const hasMore = await loadMoreProducts(page);
      if (!hasMore) {
        console.log("üìã Ê≤°ÊúâÊõ¥Â§öÂïÜÂìÅÂèØÂä†ËΩΩ");
        break;
      }

      currentPage++;
    }

    console.log(`üéâ Â§öÈ°µÊäìÂèñÂÆåÊàêÔºåÂÖ±Ëé∑Âèñ ${products.length} ‰∏™ÂïÜÂìÅ`);
    return products.slice(0, TARGET_PRODUCTS); // Á°Æ‰øù‰∏çË∂ÖËøáÁõÆÊ†áÊï∞Èáè
  } catch (error: unknown) {
    console.error("üí• Â§öÈ°µÊäìÂèñÂ§±Ë¥•:", error);
    return [];
  }
}

/**
 * ÊèêÂèñÂΩìÂâçÈ°µÈù¢ÁöÑÂïÜÂìÅ
 */
async function extractCurrentPageProducts(
  page: Page,
): Promise<Record<string, unknown>[]> {
  try {
    let productItems: unknown[] = [];

    // ‰ΩøÁî®Â∑≤ÊúâÁöÑ‰∫ßÂìÅÈ°πÈÄâÊã©Âô®
    for (const selector of SELECTORS.PLP_PRODUCT_ITEM_SELECTORS) {
      try {
        const items = await page.locator(selector).all();
        if (items.length > 0) {
          console.log(
            `üì¶ ÊâæÂà∞ ${items.length} ‰∏™ÂïÜÂìÅÈ°πÔºå‰ΩøÁî®ÈÄâÊã©Âô®: ${selector}`,
          );
          productItems = items;
          break;
        }
      } catch {
        continue;
      }
    }

    if (productItems.length === 0) {
      return [];
    }

    const products: Record<string, unknown>[] = [];

    for (let i = 0; i < productItems.length; i++) {
      const item = productItems[i];

      try {
        const productData = await extractSingleProduct(item, page);

        if (
          productData &&
          (productData.brand || productData.name || productData.title)
        ) {
          products.push(productData);
        }
      } catch {
        // Ë∑≥ËøáÂ§±Ë¥•ÁöÑÂïÜÂìÅ
        continue;
      }
    }

    return products;
  } catch (error: unknown) {
    console.error("üí• ÊèêÂèñÂΩìÂâçÈ°µÈù¢ÂïÜÂìÅÂ§±Ë¥•:", error);
    return [];
  }
}

/**
 * Âä†ËΩΩÊõ¥Â§öÂïÜÂìÅ
 */
async function loadMoreProducts(page: Page): Promise<boolean> {
  try {
    console.log("\nüîÑ ÂØªÊâæÂπ∂ÁÇπÂáª'Show more'ÊåâÈíÆ...");

    // ÊªëÂä®Âà∞È°µÈù¢Â∫ïÈÉ®
    console.log("üìú ÊªëÂä®Âà∞È°µÈù¢Â∫ïÈÉ®...");
    await page.evaluate(() => {
      window.scrollTo({
        top: document.body.scrollHeight,
        behavior: "smooth",
      });
    });

    // Á≠âÂæÖÊªëÂä®ÂÆåÊàê
    await page.waitForTimeout(2000);

    // Â∞ùËØïÊâæÂà∞"Show more"ÊåâÈíÆ
    let showMoreButton = null;
    const showMoreSelectors = [
      SELECTORS.PLP_LOAD_MORE_BUTTON,
      "div.loadmore__button > a.button--active",
      '.loadmore__button a:has-text("Show more")',
      'a:has-text("Show more")',
    ];

    for (const selector of showMoreSelectors) {
      try {
        console.log(`üîç Â∞ùËØïShow moreÈÄâÊã©Âô®: ${selector}`);
        showMoreButton = await page.locator(selector).first();
        if (await showMoreButton.isVisible({ timeout: 3000 })) {
          console.log(`üìç ÊâæÂà∞Show moreÊåâÈíÆ: ${selector}`);
          break;
        }
      } catch {
        continue;
      }
    }

    if (!showMoreButton || !(await showMoreButton.isVisible())) {
      console.log("‚ö†Ô∏è Êú™ÊâæÂà∞Show moreÊåâÈíÆÔºåÂèØËÉΩÂ∑≤Âà∞ÊúÄÂêé‰∏ÄÈ°µ");
      return false;
    }

    // Ê£ÄÊü•ÊåâÈíÆÁä∂ÊÄÅ‰ø°ÊÅØ
    let loadInfo = "";
    try {
      const info = await page
        .locator(SELECTORS.PLP_LOAD_MORE_INFO)
        .textContent();
      if (info) {
        loadInfo = info.trim();
        console.log(`üìä Âä†ËΩΩ‰ø°ÊÅØ: ${loadInfo}`);
      }
    } catch {
      // ‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•‰∏çÂΩ±Âìç‰∏ªÊµÅÁ®ã
    }

    // Ê®°ÊãüÁúüÂÆûÁî®Êà∑ÁÇπÂáª
    const box = await showMoreButton.boundingBox();
    if (box) {
      // ÁßªÂä®Èº†Ê†áÂà∞ÊåâÈíÆ‰ΩçÁΩÆ
      await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, {
        steps: 5,
      });
      await page.waitForTimeout(500);

      // ÊÇ¨ÂÅú
      await showMoreButton.hover();
      await page.waitForTimeout(300);
    }

    // ÁÇπÂáªShow moreÊåâÈíÆ
    console.log("üñ±Ô∏è  ÁÇπÂáªShow moreÊåâÈíÆ...");
    await showMoreButton.click();

    console.log("‚è∞ Á≠âÂæÖÊñ∞ÂïÜÂìÅÂä†ËΩΩ...");
    // Á≠âÂæÖ3-5ÁßíËÆ©Êñ∞ÂïÜÂìÅÊ∏≤Êüì
    const waitTime = 3000 + Math.random() * 2000;
    await page.waitForTimeout(waitTime);

    console.log("‚úÖ ÊàêÂäüÂä†ËΩΩÊõ¥Â§öÂïÜÂìÅ");
    return true;
  } catch (error: unknown) {
    console.error("üí• Âä†ËΩΩÊõ¥Â§öÂïÜÂìÅÂ§±Ë¥•:", error);
    return false;
  }
}

/*
async function debugPdpStructure(page: Page): Promise<void> {
  try {
    console.log("üîç ÂºÄÂßãÂàÜÊûêËØ¶ÊÉÖÈ°µDOMÁªìÊûÑ...");
    
    const structure = await page.evaluate(() => {
      const info = {
        url: window.location.href,
        title: document.title,
        bodyClasses: document.body?.className || '',
        // Êü•ÊâæÂèØËÉΩÂåÖÂê´ÂìÅÁâå‰ø°ÊÅØÁöÑÂÖÉÁ¥†
        brandSelectors: [
          '.product__area__branding__designer__link',
          '.product__branding__designer',
          '.designer',
          '[class*="brand"]',
          '[class*="designer"]',
          'h1', 'h2', 'h3'
        ].map(selector => ({
          selector,
          count: document.querySelectorAll(selector).length,
          firstText: document.querySelector(selector)?.textContent?.trim().substring(0, 50) || 'not found',
          firstClass: document.querySelector(selector)?.className || 'no class'
        })),
        // Êü•ÊâæÂèØËÉΩÂåÖÂê´ÂïÜÂìÅÂêçÁß∞ÁöÑÂÖÉÁ¥†
        nameSelectors: [
          '.product__area__branding__name',
          '.product__name',
          '.product-name',
          '[class*="product"][class*="name"]',
          '[class*="title"]'
        ].map(selector => ({
          selector,
          count: document.querySelectorAll(selector).length,
          firstText: document.querySelector(selector)?.textContent?.trim().substring(0, 50) || 'not found',
          firstClass: document.querySelector(selector)?.className || 'no class'
        })),
        // Êü•ÊâæÂèØËÉΩÂåÖÂê´‰ª∑Ê†ºÁöÑÂÖÉÁ¥†
        priceSelectors: [
          'div.productinfo__price',
          '.price',
          '[class*="price"]',
          '[class*="pricing"]'
        ].map(selector => ({
          selector,
          count: document.querySelectorAll(selector).length,
          firstText: document.querySelector(selector)?.textContent?.trim().substring(0, 50) || 'not found',
          firstClass: document.querySelector(selector)?.className || 'no class'
        })),
        // Êü•Êâæ‰∏ªË¶ÅÁöÑÂÆπÂô®ÂÖÉÁ¥†
        mainContainers: [
          '.product__area',
          '.product-details',
          '.product-info',
          '.productinfo',
          '[class*="product"]'
        ].map(selector => ({
          selector,
          count: document.querySelectorAll(selector).length,
          firstClass: document.querySelector(selector)?.className || 'no class'
        }))
      };
      
      return info;
    });
    
    console.log("üîç ËØ¶ÊÉÖÈ°µDOMÁªìÊûÑÂàÜÊûê:");
    console.log(`   üìÑ È°µÈù¢Ê†áÈ¢ò: ${structure.title}`);
    console.log(`   üîó È°µÈù¢URL: ${structure.url}`);
    console.log(`   üì¶ BodyÁ±ªÂêç: ${structure.bodyClasses}`);
    
    console.log("\nüè∑Ô∏è  ÂìÅÁâåÈÄâÊã©Âô®ÂàÜÊûê:");
    structure.brandSelectors.forEach((item: any) => {
      if (item.count > 0) {
        console.log(`   ‚úÖ ${item.selector}: ${item.count}‰∏™ - "${item.firstText}"`);
      }
    });
    
    console.log("\nüìù ÂïÜÂìÅÂêçÁß∞ÈÄâÊã©Âô®ÂàÜÊûê:");
    structure.nameSelectors.forEach((item: any) => {
      if (item.count > 0) {
        console.log(`   ‚úÖ ${item.selector}: ${item.count}‰∏™ - "${item.firstText}"`);
      }
    });
    
    console.log("\nüí∞ ‰ª∑Ê†ºÈÄâÊã©Âô®ÂàÜÊûê:");
    structure.priceSelectors.forEach((item: any) => {
      if (item.count > 0) {
        console.log(`   ‚úÖ ${item.selector}: ${item.count}‰∏™ - "${item.firstText}"`);
      }
    });
    
    console.log("\nüì¶ ‰∏ªË¶ÅÂÆπÂô®ÂàÜÊûê:");
    structure.mainContainers.forEach((item: any) => {
      if (item.count > 0) {
        console.log(`   ‚úÖ ${item.selector}: ${item.count}‰∏™`);
      }
    });
    
  } catch (error: unknown) {
    console.error("üí• DOMÁªìÊûÑÂàÜÊûêÂ§±Ë¥•:", error);
  }
}
*/

/**
 * ÊèêÂèñÂïÜÂìÅËØ¶ÊÉÖÈ°µÊï∞ÊçÆ
 */
async function extractPdpData(
  page: Page,
): Promise<Record<string, unknown> | null> {
  try {
    console.log("üì¶ ÂºÄÂßãÊèêÂèñÂïÜÂìÅËØ¶ÊÉÖÈ°µÊï∞ÊçÆ...");

    // ÊîπËøõÁöÑÁ≠âÂæÖÁ≠ñÁï•
    console.log("‚è∞ Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ...");
    try {
      // È¶ñÂÖàÁ≠âÂæÖDOMÂä†ËΩΩ
      await page.waitForLoadState("domcontentloaded", { timeout: 15000 });
      console.log("‚úÖ DOMÂä†ËΩΩÂÆåÊàê");

      // Á≠âÂæÖ‰∏Ä‰∫õÂÖ≥ÈîÆÂÖÉÁ¥†Âá∫Áé∞
      const keySelectors = [
        ".product__area__branding__designer__link",
        ".product__area__branding__name",
        "div.productinfo__price",
        ".product__area",
        "h1",
        "h2",
      ];

      let foundKeyElement = false;
      for (const selector of keySelectors) {
        try {
          await page.waitForSelector(selector, { timeout: 5000 });
          console.log(`‚úÖ ÊâæÂà∞ÂÖ≥ÈîÆÂÖÉÁ¥†: ${selector}`);
          foundKeyElement = true;
          break;
        } catch {
          console.log(`‚è∞ Á≠âÂæÖÂÖÉÁ¥†Ë∂ÖÊó∂: ${selector}`);
        }
      }

      if (!foundKeyElement) {
        console.log("‚ö†Ô∏è Êú™ÊâæÂà∞‰ªª‰ΩïÂÖ≥ÈîÆÂÖÉÁ¥†ÔºåÁªßÁª≠Â∞ùËØïÊï∞ÊçÆÊèêÂèñ");
      }

      // ÂáèÂ∞ëÈ°µÈù¢Á®≥ÂÆöÁ≠âÂæÖÊó∂Èó¥
      await page.waitForTimeout(1500);
    } catch {
      console.log("‚ö†Ô∏è È°µÈù¢Âä†ËΩΩÁ≠âÂæÖË∂ÖÊó∂ÔºåÂ∞ùËØïÁªßÁª≠");
    }

    // Áîü‰∫ßÊ®°ÂºèÔºöË∑≥ËøáDOMË∞ÉËØï‰ª•ÊèêÂçáÈÄüÂ∫¶
    // await debugPdpStructure(page); // ‰ªÖÂºÄÂèëÊó∂ÂêØÁî®

    const productDetails: Record<string, unknown> = {};

    // Âø´ÈÄüÊèêÂèñÂìÅÁâå - ‰ºòÂåñÈÄâÊã©Âô®È°∫Â∫èÔºåÂáèÂ∞ëË∂ÖÊó∂Êó∂Èó¥
    console.log("üè∑Ô∏è  Âø´ÈÄüÊèêÂèñÂìÅÁâå‰ø°ÊÅØ...");
    const brandSelectors = [
      SELECTORS.PDP_BRAND, // ÊúÄÂèØËÉΩÊàêÂäüÁöÑÂéüÈÄâÊã©Âô®
      "h1",
      "h2", // Âø´ÈÄüÁÆÄÂçïÈÄâÊã©Âô®
      ".product__branding__designer",
      ".designer",
      '[class*="brand"]',
      '[class*="designer"]',
    ];

    for (const selector of brandSelectors) {
      try {
        const brand = await page
          .locator(selector)
          .first()
          .textContent({ timeout: 1000 }); // ÂáèÂ∞ëÂà∞1Áßí
        if (brand && brand.trim().length > 0) {
          productDetails.brand = brand.trim();
          console.log(`‚úÖ ÂìÅÁâåÊèêÂèñÊàêÂäü (${selector}): ${productDetails.brand}`);
          break;
        }
      } catch {
        // ÈùôÈªòÂ§±Ë¥•Ôºå‰∏çÊâìÂç∞Êó•Âøó‰ª•ÊèêÂçáÈÄüÂ∫¶
        continue;
      }
    }

    if (!productDetails.brand) {
      console.log("‚ùå ÊâÄÊúâÂìÅÁâåÈÄâÊã©Âô®ÈÉΩÂ§±Ë¥•");
    }

    // Âø´ÈÄüÊèêÂèñÂïÜÂìÅÂêçÁß∞
    console.log("üìù Âø´ÈÄüÊèêÂèñÂïÜÂìÅÂêçÁß∞...");
    const nameSelectors = [
      SELECTORS.PDP_NAME, // ÊúÄÂèØËÉΩÊàêÂäüÁöÑÂéüÈÄâÊã©Âô®
      "h1",
      "h2", // Âø´ÈÄüÈÄâÊã©Âô®
      ".product__name",
      ".product-name",
      '[class*="product"][class*="name"]',
      '[class*="title"]',
    ];

    for (const selector of nameSelectors) {
      try {
        const name = await page
          .locator(selector)
          .first()
          .textContent({ timeout: 1000 }); // ÂáèÂ∞ëÂà∞1Áßí
        if (
          name &&
          name.trim().length > 0 &&
          name.trim() !== productDetails.brand
        ) {
          productDetails.name = name.trim();
          console.log(
            `‚úÖ ÂïÜÂìÅÂêçÁß∞ÊèêÂèñÊàêÂäü (${selector}): ${productDetails.name}`,
          );
          break;
        }
      } catch {
        continue; // ÈùôÈªòÂ§±Ë¥•
      }
    }

    // Âø´ÈÄüÊèêÂèñ‰ª∑Ê†º‰ø°ÊÅØ - Â§ßÂπÖ‰ºòÂåñ
    console.log("üí∞ Âø´ÈÄüÊèêÂèñ‰ª∑Ê†º‰ø°ÊÅØ...");
    const priceContainerSelectors = [
      SELECTORS.PDP_PRICE_CONTAINER, // ÊúÄÂèØËÉΩÊàêÂäüÁöÑÂéüÈÄâÊã©Âô®
      ".price",
      '[class*="price"]',
      '[class*="pricing"]',
    ];

    for (const containerSelector of priceContainerSelectors) {
      try {
        const priceContainer = page.locator(containerSelector).first();

        if (
          await priceContainer.isVisible({ timeout: 800 }).catch(() => false)
        ) {
          // ÂáèÂ∞ëÂà∞800ms
          // Âø´ÈÄüÁ≠ñÁï•ÔºöÁõ¥Êé•ÊèêÂèñÂÆπÂô®ÊñáÊú¨Âπ∂Áî®Ê≠£ÂàôËß£Êûê
          try {
            const containerText = await priceContainer.textContent({
              timeout: 500,
            });
            if (containerText && containerText.trim()) {
              // ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÂø´ÈÄüÊèêÂèñ‰ª∑Ê†º
              const priceMatches = containerText.match(
                /\$[\d,.]+|\$\s*[\d,.]+|USD\s*[\d,.]+|[\d,.]+\s*USD/gi,
              );
              if (priceMatches && priceMatches.length > 0) {
                if (priceMatches.length === 1) {
                  productDetails.currentPrice = priceMatches[0].trim();
                } else {
                  // Â§ö‰∏™‰ª∑Ê†ºÔºåÁ¨¨‰∏Ä‰∏™ÈÄöÂ∏∏ÊòØÂΩìÂâç‰ª∑Ê†ºÔºåÁ¨¨‰∫å‰∏™ÊòØÂéü‰ª∑
                  productDetails.currentPrice = priceMatches[0].trim();
                  productDetails.originalPrice = priceMatches[1].trim();
                }
                console.log(`‚úÖ Âø´ÈÄüÊèêÂèñ‰ª∑Ê†º: ${productDetails.currentPrice}`);
                // priceExtracted = true;
                break;
              }
            }
          } catch {
            continue;
          }
        }
      } catch {
        continue; // ÈùôÈªòÂ§±Ë¥•
      }
    }

    // Âø´ÈÄüÊèêÂèñÂÖ∂‰ªñÂÖ≥ÈîÆ‰ø°ÊÅØ
    console.log("üìù Âø´ÈÄüÊèêÂèñÂÖ∂‰ªñ‰ø°ÊÅØ...");

    // Âπ∂Ë°åÊèêÂèñÊèèËø∞ÂíåÂõæÁâá‰ª•ËäÇÁúÅÊó∂Èó¥
    const [description, mainImage] = await Promise.allSettled([
      // Âø´ÈÄüÊèêÂèñÊèèËø∞
      (async () => {
        const descSelectors = [
          SELECTORS.PDP_DETAILS_ACCORDION_CONTENT + " p",
          ".product-description",
          "p",
        ];
        for (const selector of descSelectors) {
          try {
            const desc = await page
              .locator(selector)
              .first()
              .textContent({ timeout: 500 });
            if (desc && desc.trim().length > 10) {
              return desc.trim().substring(0, 150); // Ëøõ‰∏ÄÊ≠•Áº©Áü≠
            }
          } catch {
            continue;
          }
        }
        return null;
      })(),

      // Âø´ÈÄüÊèêÂèñ‰∏ªÂõæÁâá
      (async () => {
        const imgSelectors = [
          SELECTORS.PDP_IMAGES,
          ".product-image img",
          "img",
        ];
        for (const selector of imgSelectors) {
          try {
            const img = await page
              .locator(selector)
              .first()
              .getAttribute("src", { timeout: 500 });
            if (img) return img.trim();
          } catch {
            continue;
          }
        }
        return null;
      })(),
    ]);

    if (description.status === "fulfilled" && description.value) {
      productDetails.description = description.value;
      console.log(`‚úÖ ÊèèËø∞: ${description.value.substring(0, 30)}...`);
    }

    if (mainImage.status === "fulfilled" && mainImage.value) {
      productDetails.detailImages = [mainImage.value];
      console.log(`‚úÖ ‰∏ªÂõæÁâáÊèêÂèñÊàêÂäü`);
    }

    // ÊèêÂèñSKU
    try {
      const url = page.url();
      const urlPath = new URL(url).pathname;
      const pathSegments = urlPath.split("-");
      if (pathSegments.length > 0) {
        const lastSegment = pathSegments[pathSegments.length - 1];
        const skuMatch = lastSegment.match(/^(p\d+)$/i);
        if (skuMatch && skuMatch[1]) {
          productDetails.sku = skuMatch[1].toLowerCase();
        }
      }
    } catch {
      console.log("‚ö†Ô∏è SKUÊèêÂèñÂ§±Ë¥•");
    }

    productDetails.detailPageUrl = page.url();
    productDetails.scrapedAt = new Date().toISOString();

    console.log(
      `‚úÖ ËØ¶ÊÉÖÈ°µÊï∞ÊçÆÊèêÂèñÂÆåÊàê: ${productDetails.brand} - ${productDetails.name}`,
    );

    return productDetails;
  } catch (error: unknown) {
    console.error("üí• ËØ¶ÊÉÖÈ°µÊï∞ÊçÆÊèêÂèñÂ§±Ë¥•:", error);
    return null;
  }
}

/**
 * Ê®°ÊãüÁÇπÂáªÂïÜÂìÅÈìæÊé•ËøõÂÖ•ËØ¶ÊÉÖÈ°µ
 */
async function simulateProductClick(
  page: Page,
  productElement: any,
): Promise<boolean> {
  try {
    console.log("üñ±Ô∏è  ÂáÜÂ§áÁÇπÂáªÂïÜÂìÅËøõÂÖ•ËØ¶ÊÉÖÈ°µ...");

    // ÊªöÂä®Âà∞ÂïÜÂìÅ‰ΩçÁΩÆ
    await productElement.scrollIntoViewIfNeeded();
    await page.waitForTimeout(1000);

    // ÊâæÂà∞ÂïÜÂìÅÈìæÊé•
    const productLink = productElement.locator(SELECTORS.PLP_PRODUCT_LINK);

    if (!(await productLink.isVisible())) {
      console.log("‚ùå ÂïÜÂìÅÈìæÊé•‰∏çÂèØËßÅ");
      return false;
    }

    // Ëé∑ÂèñÈìæÊé•‰ΩçÁΩÆ
    const box = await productLink.boundingBox();
    if (!box) {
      console.log("‚ùå Êó†Ê≥ïËé∑ÂèñÂïÜÂìÅÈìæÊé•‰ΩçÁΩÆ");
      return false;
    }

    console.log(`üìç ÂïÜÂìÅÈìæÊé•‰ΩçÁΩÆ: x=${box.x}, y=${box.y}`);

    // Ê®°ÊãüÁúüÂÆûÁî®Êà∑Èº†Ê†áÊìç‰Ωú
    await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, {
      steps: 8,
    });
    await page.waitForTimeout(500 + Math.random() * 500);

    // ÊÇ¨ÂÅú
    await productLink.hover();
    console.log("üñ±Ô∏è  Èº†Ê†áÊÇ¨ÂÅúÂú®ÂïÜÂìÅ‰∏ä");
    await page.waitForTimeout(300 + Math.random() * 300);

    // ÁÇπÂáªÂïÜÂìÅÈìæÊé•
    console.log("üñ±Ô∏è  ÁÇπÂáªÂïÜÂìÅÈìæÊé•...");
    await Promise.all([
      page.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 30000 }),
      productLink.click(),
    ]);

    console.log("‚úÖ ÊàêÂäüËøõÂÖ•ÂïÜÂìÅËØ¶ÊÉÖÈ°µ");

    return true;
  } catch (error: unknown) {
    console.error("üí• ÁÇπÂáªÂïÜÂìÅÂ§±Ë¥•:", error);
    return false;
  }
}

/**
 * ËøîÂõûÂïÜÂìÅÂàóË°®È°µ
 */
async function navigateBackToList(page: Page): Promise<boolean> {
  try {
    console.log("üîô ËøîÂõûÂïÜÂìÅÂàóË°®È°µ...");

    // ‰ΩøÁî®ÊµèËßàÂô®ÂêéÈÄÄÊåâÈíÆ
    await page.goBack({ waitUntil: "domcontentloaded", timeout: 15000 });

    // Á≠âÂæÖÈ°µÈù¢Á®≥ÂÆö
    await page.waitForTimeout(2000);

    console.log("‚úÖ ÊàêÂäüËøîÂõûÂïÜÂìÅÂàóË°®È°µ");

    return true;
  } catch (error: unknown) {
    console.error("üí• ËøîÂõûÂàóË°®È°µÂ§±Ë¥•:", error);
    return false;
  }
}

/**
 * ÊèêÂèñÂïÜÂìÅËØ¶ÊÉÖ‰ø°ÊÅØÔºà‰∏ªÂáΩÊï∞Ôºâ
 */
async function extractProductDetails(
  page: Page,
  products: Record<string, unknown>[],
  maxDetailsCount = 20,
): Promise<Record<string, unknown>[]> {
  try {
    console.log(`\nüîç ÂºÄÂßãÊäìÂèñÂïÜÂìÅËØ¶ÊÉÖ‰ø°ÊÅØ (ÁõÆÊ†á: ${maxDetailsCount}‰∏™)`);

    const detailedProducts: Record<string, unknown>[] = [];
    const targetProducts = products.slice(0, maxDetailsCount);

    for (let i = 0; i < targetProducts.length; i++) {
      const product = targetProducts[i];
      console.log(
        `\nüì¶ Â§ÑÁêÜÂïÜÂìÅ ${i + 1}/${targetProducts.length}: ${product.brand} - ${product.name}`,
      );

      try {
        // ÈáçÊñ∞Ëé∑ÂèñÂïÜÂìÅÂÖÉÁ¥†ÔºàÂõ†‰∏∫È°µÈù¢ÂèØËÉΩÂ∑≤ÁªèÂèòÂåñÔºâ
        const productItems = await page
          .locator(SELECTORS.PLP_PRODUCT_ITEM_SELECTORS[0])
          .all();

        if (i >= productItems.length) {
          console.log("‚ö†Ô∏è ÂïÜÂìÅÂÖÉÁ¥†Á¥¢ÂºïË∂ÖÂá∫ËåÉÂõ¥ÔºåË∑≥Ëøá");
          continue;
        }

        const productElement = productItems[i];

        // ÁÇπÂáªËøõÂÖ•ËØ¶ÊÉÖÈ°µ
        const clickSuccess = await simulateProductClick(page, productElement);
        if (!clickSuccess) {
          console.log("‚ùå ÁÇπÂáªÂ§±Ë¥•ÔºåË∑≥ËøáËØ•ÂïÜÂìÅ");
          continue;
        }

        // Ê®°ÊãüÁî®Êà∑Âú®ËØ¶ÊÉÖÈ°µÁöÑÊµèËßàË°å‰∏∫
        await simulateDetailPageBrowsing(page);

        // ÊèêÂèñËØ¶ÊÉÖÈ°µÊï∞ÊçÆ
        const detailData = await extractPdpData(page);

        if (detailData) {
          // ÂêàÂπ∂ÂàóË°®È°µÂíåËØ¶ÊÉÖÈ°µÊï∞ÊçÆ
          const combinedProduct = {
            ...(product as any),
            ...(detailData as any),
            listPageData: product,
            hasDetailData: true,
          };

          detailedProducts.push(combinedProduct);
          console.log(`‚úÖ ÂïÜÂìÅËØ¶ÊÉÖÊèêÂèñÊàêÂäü ${i + 1}/${targetProducts.length}`);
        } else {
          console.log(`‚ö†Ô∏è ÂïÜÂìÅËØ¶ÊÉÖÊèêÂèñÂ§±Ë¥• ${i + 1}/${targetProducts.length}`);
          // ‰ªçÁÑ∂‰øùÂ≠òÂü∫Á°ÄÊï∞ÊçÆ
          detailedProducts.push({
            ...(product as any),
            hasDetailData: false,
          });
        }

        // ËøîÂõûÂàóË°®È°µ
        const backSuccess = await navigateBackToList(page);
        if (!backSuccess) {
          console.log("‚ùå ËøîÂõûÂàóË°®È°µÂ§±Ë¥•ÔºåÂ∞ùËØïÂà∑Êñ∞È°µÈù¢");
          await page.reload({ waitUntil: "domcontentloaded" });
          await page.waitForTimeout(3000);
        }

        // ‰ºòÂåñÁ≠âÂæÖÊó∂Èó¥Ôºö1-3ÁßíÔºàÂéüÊù•3-8ÁßíÔºâ
        const waitTime = 1000 + Math.random() * 2000;
        console.log(`‚è∞ Âø´ÈÄüÁ≠âÂæÖ ${Math.round(waitTime / 1000)} Áßí...`);
        await page.waitForTimeout(waitTime);
      } catch (error: unknown) {
        console.error(`üí• Â§ÑÁêÜÂïÜÂìÅ ${i + 1} Êó∂ÂèëÁîüÈîôËØØ:`, error);
        // Â∞ùËØïËøîÂõûÂàóË°®È°µ
        try {
          await navigateBackToList(page);
        } catch {
          console.log("Â∞ùËØïËøîÂõûÂàóË°®È°µÂ§±Ë¥•ÔºåÂà∑Êñ∞È°µÈù¢");
          await page.reload({ waitUntil: "domcontentloaded" });
          await page.waitForTimeout(3000);
        }
        continue;
      }
    }

    console.log(
      `\nüéâ ÂïÜÂìÅËØ¶ÊÉÖÊäìÂèñÂÆåÊàêÔºåÊàêÂäüËé∑Âèñ ${detailedProducts.length} ‰∏™ÂïÜÂìÅÁöÑËØ¶ÁªÜ‰ø°ÊÅØ`,
    );
    return detailedProducts;
  } catch (error: unknown) {
    console.error("üí• ÂïÜÂìÅËØ¶ÊÉÖÊäìÂèñ‰∏ªÊµÅÁ®ãÂ§±Ë¥•:", error);
    return products; // ËøîÂõûÂéüÂßãÊï∞ÊçÆ
  }
}

/**
 * ‰ºòÂåñÁöÑËØ¶ÊÉÖÈ°µÊµèËßàË°å‰∏∫ - ÂáèÂ∞ë‰∏çÂøÖË¶ÅÁöÑÁ≠âÂæÖÊó∂Èó¥
 */
async function simulateDetailPageBrowsing(page: Page): Promise<void> {
  try {
    console.log("üëÄ Âø´ÈÄüÊµèËßàËØ¶ÊÉÖÈ°µ...");

    // Â§ßÂπÖÂáèÂ∞ëÊµèËßàÊó∂Èó¥Ôºö500-1500msÔºàÂéüÊù•2000-5000msÔºâ
    const browsingTime = 500 + Math.random() * 1000;
    await page.waitForTimeout(browsingTime);

    // ÂáèÂ∞ëÊªöÂä®Ê¨°Êï∞ÂíåÁ≠âÂæÖÊó∂Èó¥
    await page.evaluate(() => {
      window.scrollBy({
        top: window.innerHeight * 0.5,
        behavior: "smooth",
      });
    });
    await page.waitForTimeout(300); // ÂáèÂ∞ëÂà∞300ms

    // ÁÆÄÂåñÈº†Ê†áÁßªÂä®
    const viewport = (await page.viewportSize()) || {
      width: 1920,
      height: 1080,
    };
    await page.mouse.move(
      Math.random() * viewport.width,
      Math.random() * viewport.height,
      { steps: 1 }, // ÂáèÂ∞ëÊ≠•Êï∞
    );
  } catch (error: unknown) {
    console.log("‚ö†Ô∏è ËØ¶ÊÉÖÈ°µÊµèËßàÊ®°ÊãüÂ§±Ë¥•:", error);
  }
}

/**
 * ÊèêÂèñÂçï‰∏™‰∫ßÂìÅÁöÑ‰ø°ÊÅØ
 */
async function extractSingleProduct(
  item: any,
  page: Page,
): Promise<Record<string, unknown> | null> {
  try {
    // ÊèêÂèñÈìæÊé•
    const link = await item
      .locator(SELECTORS.PLP_PRODUCT_LINK)
      .getAttribute("href")
      .catch(() => null);
    const fullUrl = link ? new URL(link, page.url()).toString() : "";

    // ÊèêÂèñÂìÅÁâå
    const brand = await item
      .locator(SELECTORS.PLP_BRAND)
      .textContent()
      .catch(() => "");

    // ÊèêÂèñ‰∫ßÂìÅÂêçÁß∞
    const name = await item
      .locator(SELECTORS.PLP_NAME)
      .textContent()
      .catch(() => "");

    // ÊèêÂèñÂõæÁâá
    const image = await item
      .locator(SELECTORS.PLP_IMAGE)
      .first()
      .getAttribute("src")
      .catch(() => "");

    // ÊèêÂèñÂ∞∫ÂØ∏
    const sizeLocators = await item
      .locator(SELECTORS.PLP_SIZES)
      .all()
      .catch(() => []);
    const sizes: string[] = [];
    for (const sizeLocator of sizeLocators) {
      const sizeText = await sizeLocator.textContent().catch(() => "");
      if (
        sizeText &&
        sizeText.trim() &&
        sizeText.toLowerCase() !== "available sizes:"
      ) {
        const isNotAvailable = (
          await sizeLocator.getAttribute("class").catch(() => "")
        )?.includes("item__sizes__size--notavailable");
        if (!isNotAvailable) {
          sizes.push(sizeText.trim());
        }
      }
    }

    // ÊèêÂèñÊ†áÁ≠æ
    const tagLocators = await item
      .locator(SELECTORS.PLP_TAG)
      .all()
      .catch(() => []);
    const tags: string[] = [];
    for (const tagLocator of tagLocators) {
      const tagText = await tagLocator.textContent().catch(() => "");
      if (tagText && tagText.trim()) {
        tags.push(tagText.trim());
      }
    }

    return {
      brand: brand?.trim() || "",
      name: name?.trim() || "",
      title: name?.trim() || "", // ÂÖºÂÆπÂ≠óÊÆµ
      link: fullUrl,
      image: image?.trim() || "",
      sizes,
      tags,
      source: "Mytheresa",
    };
  } catch (error: unknown) {
    console.error("ÊèêÂèñÂçï‰∏™‰∫ßÂìÅÂ§±Ë¥•:", error);
    return null;
  }
}

// ËøêË°åÊ®°ÊãüÁÇπÂáªÊµãËØï
testSimulatedClicks()
  .then(() => {
    console.log("\nüéâ Ê®°ÊãüÁÇπÂáªÊµãËØïÂÆåÊàê");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\nüí• Ê®°ÊãüÁÇπÂáªÊµãËØïÂ§±Ë¥•:");
    console.error(error);
    process.exit(1);
  });
