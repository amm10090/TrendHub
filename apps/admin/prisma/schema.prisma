// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 数据库模式定义文件 - 定义了TrendHub后台系统的数据模型和数据库连接配置
// 本文件定义了网站设置功能所需的数据结构，用于存储和管理可配置的网站参数

// Prisma配置部分 - 指定使用的客户端生成器
// 这将生成TypeScript类型安全的数据库客户端
generator client {
  provider = "prisma-client-js"
}

// 数据库连接配置 - 指定使用PostgreSQL数据库
// 连接URL从环境变量中读取，确保安全性和环境隔离
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SiteSetting模型 - 用于存储网站配置的键值对
// 采用分类存储方式，便于管理不同类型的设置（如general、seo、appearance等）
model SiteSetting {
  id        String   @id @default(cuid()) // 唯一标识符，使用CUID生成
  key       String   @unique              // 设置键名，如"siteName"，确保唯一性
  value     String                        // 设置值，存储为字符串（可以是序列化的JSON）
  category  String                        // 设置类别，如"general"、"seo"等，用于分组显示
  updatedAt DateTime @updatedAt           // 更新时间，由Prisma自动维护
  createdAt DateTime @default(now())      // 创建时间，默认为记录创建时的时间

  // 在category字段上创建索引，优化按类别查询性能
  // 这对于按类别获取设置（如获取所有SEO设置）很重要
  @@index([category])
}

// Category模型 - 用于存储商品分类信息
model Category {
  id          String     @id @default(cuid())  // 唯一标识符
  name        String                           // 分类名称
  slug        String     @unique               // URL友好的唯一标识符
  description String?                          // 分类描述（可选）
  level       Int                              // 分类层级 (1=一级分类，2=二级分类，3=三级分类)
  parentId    String?                          // 父级分类ID（可选，用于构建分类层级）
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  image       String?                          // 分类图片URL（可选）
  isActive    Boolean    @default(true)        // 分类是否激活
  products    Product[]                        // 与该分类关联的商品
  createdAt   DateTime   @default(now())       // 创建时间
  updatedAt   DateTime   @updatedAt            // 更新时间

  @@index([parentId])
  @@index([level])
  @@index([isActive])
}

// Brand模型 - 用于存储品牌信息
model Brand {
  id          String    @id @default(cuid())  // 唯一标识符
  name        String    @unique               // 品牌名称
  slug        String    @unique               // URL友好的唯一标识符
  description String?                         // 品牌描述（可选）
  logo        String?                         // 品牌LOGO URL（可选）
  website     String?                         // 品牌官网URL（可选）
  isActive    Boolean   @default(true)        // 品牌是否激活
  products    Product[]                       // 与该品牌关联的商品
  createdAt   DateTime  @default(now())       // 创建时间
  updatedAt   DateTime  @updatedAt            // 更新时间

  @@index([isActive])
}

// Product模型 - 更新以关联Category和Brand
model Product {
  id           String    @id @default(cuid())  // 唯一标识符，使用CUID生成
  name         String                          // 商品名称
  brandId      String                          // 关联的品牌ID
  brand        Brand     @relation(fields: [brandId], references: [id])
  categoryId   String                          // 关联的分类ID
  category     Category  @relation(fields: [categoryId], references: [id])
  price        Decimal                         // 商品价格
  status       String                          // 商品状态（如"In Stock"、"Low Stock"等）
  description  String?                         // 商品描述（可选）
  images       String[]                        // 商品图片URL数组
  sku          String    @unique               // 商品SKU，确保唯一性
  inventory    Int       @default(0)           // 库存数量，替代原有的stock字段
  source       String?                         // 商品来源（可选）
  colors       String[]  @default([])          // 商品颜色数组
  sizes        String[]  @default([])          // 商品尺码数组
  material     String?                         // 商品材质（可选）
  cautions     String?                         // 商品注意事项（可选）
  promotionUrl String?                         // 商品推广链接（可选）
  isDeleted    Boolean   @default(false)       // 软删除标记
  updatedAt    DateTime  @updatedAt            // 更新时间
  createdAt    DateTime  @default(now())       // 创建时间

  // 创建索引以优化查询性能
  @@index([categoryId])
  @@index([brandId])
  @@index([status])
  @@index([isDeleted])
  @@index([sku])
  @@index([source])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  url         String   @unique
  content     String?  @db.Text
  mainImage   String?                        // 页面主图字段（可选）
  status      String   @default("Draft") // "Published" 或 "Draft"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
}

// Enum for Code Snippet Type
enum SnippetType {
  JS  // JavaScript
  CSS // Cascading Style Sheets
}

// Enum for Code Snippet Injection Location
enum SnippetLocation {
  HEAD       // Inside the <head> tag
  BODY_START // Immediately after the opening <body> tag
  BODY_END   // Immediately before the closing </body> tag
}

// CodeSnippet model - For storing custom code snippets
model CodeSnippet {
  id          String          @id @default(cuid())    // Unique identifier
  name        String                                // Snippet name for identification
  description String?                               // Optional description
  code        String          @db.Text              // The actual code snippet
  type        SnippetType                           // Type of snippet (JS or CSS)
  location    SnippetLocation                       // Where to inject the snippet
  paths       String[]        @default([])          // Array of URL path patterns where the snippet should be active
  priority    Int             @default(10)          // Execution/injection priority (lower numbers run first)
  isActive    Boolean         @default(false)       // Whether the snippet is active
  createdAt   DateTime        @default(now())       // Creation timestamp
  updatedAt   DateTime        @updatedAt            // Last update timestamp

  // Add indices for potentially queried fields
  @@index([isActive])
  @@index([type])
  @@index([location])
}
