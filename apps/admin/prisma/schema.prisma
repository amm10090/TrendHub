generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([category])
}

model Category {
  id                    String         @id @default(cuid())
  name                  String
  slug                  String         @unique
  description           String?
  level                 Int
  parentId              String?
  image                 String?
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  showInNavbar          Boolean        @default(false)
  parent                Category?      @relation("SubCategories", fields: [parentId], references: [id])
  children              Category[]     @relation("SubCategories")
  targetedContentBlocks ContentBlock[] @relation("ContentBlockTargetCategory")
  products              Product[]

  @@index([parentId])
  @@index([level])
  @@index([isActive])
  @@index([showInNavbar])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  popularity  Boolean   @default(false)
  products    Product[]

  @@index([isActive])
  @@index([popularity])
}

model Product {
  id                    String    @id @default(cuid())
  name                  String
  price                 Decimal
  status                String
  description           String?
  images                String[]
  sku                   String?
  inventory             Int       @default(0)
  isDeleted             Boolean   @default(false)
  updatedAt             DateTime  @updatedAt
  createdAt             DateTime  @default(now())
  cautions              String?
  colors                String[]  @default([])
  material              String?
  sizes                 String[]  @default([])
  source                String
  promotionUrl          String?
  brandId               String
  categoryId            String
  videos                String[]  @default([])
  discount              Decimal?  @db.Decimal(10, 2)
  isNew                 Boolean   @default(false)
  originalPrice         Decimal?  @db.Decimal(10, 2)
  coupon                String?
  couponDescription     String?
  couponExpirationDate  DateTime?
  breadcrumbs           String[]  @default([])
  currency              String?
  metadata              Json?
  originalPriceCurrency String?
  scrapedAt             DateTime?
  url                   String?
  designerColorName     String?
  materialDetails       String[]  @default([])
  tags                  String[]  @default([])
  gender                String?
  brand                 Brand     @relation(fields: [brandId], references: [id])
  category              Category  @relation(fields: [categoryId], references: [id])

  @@unique([url, source], name: "url_source")
  @@index([categoryId])
  @@index([brandId])
  @@index([status])
  @@index([isDeleted])
  @@index([sku])
  @@index([source])
}

model Page {
  id          String    @id @default(cuid())
  title       String
  url         String    @unique
  content     String?
  status      String    @default("Draft")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  mainImage   String?
}

model CodeSnippet {
  id          String          @id @default(cuid())
  name        String
  code        String
  isActive    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  description String?
  paths       String[]        @default([])
  priority    Int             @default(10)
  type        SnippetType
  location    SnippetLocation

  @@index([isActive])
  @@index([type])
  @@index([location])
}

model ContentBlock {
  id                      String           @id @default(cuid())
  identifier              String           @unique
  isActive                Boolean          @default(true)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  data                    Json?
  description             String?
  name                    String
  type                    ContentBlockType
  targetPrimaryCategoryId String?
  targetPrimaryCategory   Category?        @relation("ContentBlockTargetCategory", fields: [targetPrimaryCategoryId], references: [id])
  items                   ContentItem[]

  @@index([identifier])
  @@index([type])
  @@index([isActive])
  @@index([targetPrimaryCategoryId])
}

model ContentItem {
  id             String          @id @default(cuid())
  parentId       String
  itemIdentifier String?         @unique
  type           ContentItemType
  name           String
  data           Json
  order          Int             @default(0)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  slotKey        String?
  parentBlock    ContentBlock    @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@index([parentId])
  @@index([itemIdentifier])
  @@index([type])
  @@index([isActive])
  @@index([slotKey])
}

model ScraperTaskDefinition {
  id               String                 @id @default(cuid())
  name             String                 @unique
  description      String?
  targetSite       String
  startUrls        String[]
  cronExpression   String?
  isEnabled        Boolean                @default(true)
  maxRequests      Int?
  maxLoadClicks    Int?
  maxProducts      Int?
  defaultInventory Int                    @default(99)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  executions       ScraperTaskExecution[]

  @@index([targetSite])
  @@index([isEnabled])
}

model ScraperTaskExecution {
  id               String                 @id @default(cuid())
  taskDefinitionId String
  status           ScraperTaskStatus      @default(IDLE)
  triggerType      ScraperTaskTriggerType
  startedAt        DateTime?
  completedAt      DateTime?
  metrics          Json?
  errorMessage     String?
  errorStack       String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  taskDefinition   ScraperTaskDefinition  @relation(fields: [taskDefinitionId], references: [id], onDelete: Cascade)
  logs             ScraperTaskLog[]

  @@index([taskDefinitionId])
  @@index([status])
  @@index([triggerType])
}

model ScraperTaskLog {
  id          String               @id @default(cuid())
  executionId String
  level       ScraperLogLevel
  message     String
  timestamp   DateTime             @default(now())
  context     Json?
  execution   ScraperTaskExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([level])
  @@index([timestamp])
}

enum SnippetType {
  JS
  CSS
}

enum SnippetLocation {
  HEAD
  BODY_START
  BODY_END
}

enum ContentBlockType {
  BANNER
  INTRODUCTION_SECTION
  PRODUCT_GRID_HERO
  TRENDING_SECTION_CONTAINER
  PRODUCT_GRID_CONFIGURABLE
}

enum ContentItemType {
  TRENDING_CARD_LARGE
  TRENDING_CARD_NORMAL
  TRENDING_CARD_STANDALONE
  SHINING_CARD
  TEXT_LINK_BLOCK
  INTRODUCTION_GUARANTEE_ITEM
  PRODUCT_REFERENCE
}

enum ScraperTaskStatus {
  IDLE
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScraperTaskTriggerType {
  MANUAL
  SCHEDULED
  API
}

enum ScraperLogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}
